from Bio import SeqIO
import glob

from Bio import SeqIO

R_sites = ['ACTGCTGA','ATCGCTGA','TCTGCTGA', 'GCTGCTGA', 'CCTGCTGA', 'AATGCTGA', 'ATTGCTGA', 'AGTGCTGA', 'ACAGCTGA', 'ACGGCTGA', 'ACCGCTGA', 'ACTACTGA', 'ACTTCTGA', 'ACTCCTGA', 'ACTGATGA', 'ACTGTTGA', 'ACTGGTGA', 'ACTGCAGA', 'ACTGCGGA', 'ACTGCCGA', 'ACTGCTAA', 'ACTGCTTA', 'ACTGCTCA', 'ACTGCTGT', 'ACTGCTGG', 'ACTGCTGC']

N_sites = ['GGGACTAAG','AGGACTTTCC', 'TGGACTTTCC', 'GGGACTTTCC', 'CGGACTTTCC', 'AAGACTTTCC', 'ATGACTTTCC', 'ACGACTTTCC', 'AGAACTTTCC', 'AGTACTTTCC', 'AGCACTTTCC', 'AGGTCTTTCC', 'AGGGCTTTCC', 'AGGCCTTTCC', 'AGGAATTTCC', 'AGGATTTTCC', 'AGGAGTTTCC', 'AGGACATTCC', 'AGGACGTTCC', 'AGGACCTTCC', 'AGGACTATCC', 'AGGACTGTCC', 'AGGACTCTCC', 'AGGACTTACC', 'AGGACTTGCC', 'AGGACTTCCC', 'AGGACTTTAC', 'AGGACTTTTC', 'AGGACTTTGC', 'AGGACTTTCA', 'AGGACTTTCT', 'AGGACTTTCG', 'TAGACTTTCC', 'TTGACTTTCC', 'TCGACTTTCC', 'TGAACTTTCC', 'TGTACTTTCC', 'TGCACTTTCC', 'TGGTCTTTCC', 'TGGGCTTTCC', 'TGGCCTTTCC', 'TGGAATTTCC', 'TGGATTTTCC', 'TGGAGTTTCC', 'TGGACATTCC', 'TGGACGTTCC', 'TGGACCTTCC', 'TGGACTATCC', 'TGGACTGTCC', 'TGGACTCTCC', 'TGGACTTACC', 'TGGACTTGCC', 'TGGACTTCCC', 'TGGACTTTAC', 'TGGACTTTTC', 'TGGACTTTGC', 'TGGACTTTCA', 'TGGACTTTCT', 'TGGACTTTCG', 'GAGACTTTCC', 'GTGACTTTCC', 'GCGACTTTCC', 'GGAACTTTCC', 'GGTACTTTCC', 'GGCACTTTCC', 'GGGTCTTTCC', 'GGGGCTTTCC', 'GGGCCTTTCC', 'GGGAATTTCC', 'GGGATTTTCC', 'GGGAGTTTCC', 'GGGACATTCC', 'GGGACGTTCC', 'GGGACCTTCC', 'GGGACTATCC', 'GGGACTGTCC', 'GGGACTCTCC', 'GGGACTTACC', 'GGGACTTGCC', 'GGGACTTCCC', 'GGGACTTTAC', 'GGGACTTTTC', 'GGGACTTTGC', 'GGGACTTTCA', 'GGGACTTTCT', 'GGGACTTTCG', 'CAGACTTTCC', 'CTGACTTTCC', 'CCGACTTTCC', 'CGAACTTTCC', 'CGTACTTTCC', 'CGCACTTTCC', 'CGGTCTTTCC', 'CGGGCTTTCC', 'CGGCCTTTCC', 'CGGAATTTCC', 'CGGATTTTCC', 'CGGAGTTTCC', 'CGGACATTCC', 'CGGACGTTCC', 'CGGACCTTCC', 'CGGACTATCC', 'CGGACTGTCC', 'CGGACTCTCC', 'CGGACTTACC', 'CGGACTTGCC', 'CGGACTTCCC', 'CGGACTTTAC', 'CGGACTTTTC', 'CGGACTTTGC', 'CGGACTTTCA', 'CGGACTTTCT', 'CGGACTTTCG', 'GAAACTTTCC', 'GATACTTTCC', 'GACACTTTCC', 'GAGTCTTTCC', 'GAGGCTTTCC', 'GAGCCTTTCC', 'GAGAATTTCC', 'GAGATTTTCC', 'GAGAGTTTCC', 'GAGACATTCC', 'GAGACGTTCC', 'GAGACCTTCC', 'GAGACTATCC', 'GAGACTGTCC', 'GAGACTCTCC', 'GAGACTTACC', 'GAGACTTGCC', 'GAGACTTCCC', 'GAGACTTTAC', 'GAGACTTTTC', 'GAGACTTTGC', 'GAGACTTTCA', 'GAGACTTTCT', 'GAGACTTTCG', 'GTAACTTTCC', 'GTTACTTTCC', 'GTCACTTTCC', 'GTGTCTTTCC', 'GTGGCTTTCC', 'GTGCCTTTCC', 'GTGAATTTCC', 'GTGATTTTCC', 'GTGAGTTTCC', 'GTGACATTCC', 'GTGACGTTCC', 'GTGACCTTCC', 'GTGACTATCC', 'GTGACTGTCC', 'GTGACTCTCC', 'GTGACTTACC', 'GTGACTTGCC', 'GTGACTTCCC', 'GTGACTTTAC', 'GTGACTTTTC', 'GTGACTTTGC', 'GTGACTTTCA', 'GTGACTTTCT', 'GTGACTTTCG', 'GCAACTTTCC', 'GCTACTTTCC', 'GCCACTTTCC', 'GCGTCTTTCC', 'GCGGCTTTCC', 'GCGCCTTTCC', 'GCGAATTTCC', 'GCGATTTTCC', 'GCGAGTTTCC', 'GCGACATTCC', 'GCGACGTTCC', 'GCGACCTTCC', 'GCGACTATCC', 'GCGACTGTCC', 'GCGACTCTCC', 'GCGACTTACC', 'GCGACTTGCC', 'GCGACTTCCC', 'GCGACTTTAC', 'GCGACTTTTC', 'GCGACTTTGC', 'GCGACTTTCA', 'GCGACTTTCT', 'GCGACTTTCG', 'GGATCTTTCC', 'GGAGCTTTCC', 'GGACCTTTCC', 'GGAAATTTCC', 'GGAATTTTCC', 'GGAAGTTTCC', 'GGAACATTCC', 'GGAACGTTCC', 'GGAACCTTCC', 'GGAACTATCC', 'GGAACTGTCC', 'GGAACTCTCC', 'GGAACTTACC', 'GGAACTTGCC', 'GGAACTTCCC', 'GGAACTTTAC', 'GGAACTTTTC', 'GGAACTTTGC', 'GGAACTTTCA', 'GGAACTTTCT', 'GGAACTTTCG', 'GGTTCTTTCC', 'GGTGCTTTCC', 'GGTCCTTTCC', 'GGTAATTTCC', 'GGTATTTTCC', 'GGTAGTTTCC', 'GGTACATTCC', 'GGTACGTTCC', 'GGTACCTTCC', 'GGTACTATCC', 'GGTACTGTCC', 'GGTACTCTCC', 'GGTACTTACC', 'GGTACTTGCC', 'GGTACTTCCC', 'GGTACTTTAC', 'GGTACTTTTC', 'GGTACTTTGC', 'GGTACTTTCA', 'GGTACTTTCT', 'GGTACTTTCG', 'GGCTCTTTCC', 'GGCGCTTTCC', 'GGCCCTTTCC', 'GGCAATTTCC', 'GGCATTTTCC', 'GGCAGTTTCC', 'GGCACATTCC', 'GGCACGTTCC', 'GGCACCTTCC', 'GGCACTATCC', 'GGCACTGTCC', 'GGCACTCTCC', 'GGCACTTACC', 'GGCACTTGCC', 'GGCACTTCCC', 'GGCACTTTAC', 'GGCACTTTTC', 'GGCACTTTGC', 'GGCACTTTCA', 'GGCACTTTCT', 'GGCACTTTCG', 'GGGTATTTCC', 'GGGTTTTTCC', 'GGGTGTTTCC', 'GGGTCATTCC', 'GGGTCGTTCC', 'GGGTCCTTCC', 'GGGTCTATCC', 'GGGTCTGTCC', 'GGGTCTCTCC', 'GGGTCTTACC', 'GGGTCTTGCC', 'GGGTCTTCCC', 'GGGTCTTTAC', 'GGGTCTTTTC', 'GGGTCTTTGC', 'GGGTCTTTCA', 'GGGTCTTTCT', 'GGGTCTTTCG', 'GGGGATTTCC', 'GGGGTTTTCC', 'GGGGGTTTCC', 'GGGGCATTCC', 'GGGGCCTTCC', 'GGGGCTATCC', 'GGGGCTGTCC', 'GGGGCTCTCC', 'GGGGCTTACC', 'GGGGCTTGCC', 'GGGGCTTCCC', 'GGGGCTTTAC', 'GGGGCTTTTC', 'GGGGCTTTGC', 'GGGGCTTTCA', 'GGGGCTTTCT', 'GGGGCTTTCG', 'GGGCATTTCC', 'GGGCTTTTCC', 'GGGCGTTTCC', 'GGGCCATTCC', 'GGGCCGTTCC', 'GGGCCCTTCC', 'GGGCCTATCC', 'GGGCCTGTCC', 'GGGCCTCTCC', 'GGGCCTTACC', 'GGGCCTTGCC', 'GGGCCTTCCC', 'GGGCCTTTAC', 'GGGCCTTTTC', 'GGGCCTTTGC', 'GGGCCTTTCA', 'GGGCCTTTCT', 'GGGCCTTTCG', 'GGGAAATTCC', 'GGGAAGTTCC', 'GGGAACTTCC', 'GGGAATATCC', 'GGGAATGTCC', 'GGGAATCTCC', 'GGGAATTACC', 'GGGAATTGCC', 'GGGAATTCCC', 'GGGAATTTAC', 'GGGAATTTTC', 'GGGAATTTGC', 'GGGAATTTCA', 'GGGAATTTCT', 'GGGAATTTCG', 'GGGATATTCC', 'GGGATGTTCC', 'GGGATCTTCC', 'GGGATTATCC', 'GGGATTGTCC', 'GGGATTCTCC', 'GGGATTTACC', 'GGGATTTGCC', 'GGGATTTCCC', 'GGGATTTTAC', 'GGGATTTTTC', 'GGGATTTTGC', 'GGGATTTTCA', 'GGGATTTTCT', 'GGGATTTTCG', 'GGGAGATTCC', 'GGGAGGTTCC', 'GGGAGCTTCC', 'GGGAGTATCC', 'GGGAGTGTCC', 'GGGAGTCTCC', 'GGGAGTTACC', 'GGGAGTTGCC', 'GGGAGTTCCC', 'GGGAGTTTAC', 'GGGAGTTTTC', 'GGGAGTTTGC', 'GGGAGTTTCA', 'GGGAGTTTCT', 'GGGAGTTTCG', 'GGGACAATCC', 'GGGACAGTCC', 'GGGACACTCC', 'GGGACATACC', 'GGGACATGCC', 'GGGACATCCC', 'GGGACATTAC', 'GGGACATTTC', 'GGGACATTGC', 'GGGACATTCA', 'GGGACATTCT', 'GGGACATTCG', 'GGGACGATCC', 'GGGACGGTCC', 'GGGACGCTCC', 'GGGACGTACC', 'GGGACGTGCC', 'GGGACGTCCC', 'GGGACGTTAC', 'GGGACGTTTC', 'GGGACGTTGC', 'GGGACGTTCA', 'GGGACGTTCT', 'GGGACGTTCG', 'GGGACCATCC', 'GGGACCGTCC', 'GGGACCCTCC', 'GGGACCTACC', 'GGGACCTGCC', 'GGGACCTCCC', 'GGGACCTTAC', 'GGGACCTTTC', 'GGGACCTTGC', 'GGGACCTTCA', 'GGGACCTTCT', 'GGGACCTTCG', 'GGGACTAACC', 'GGGACTAGCC', 'GGGACTACCC', 'GGGACTATAC', 'GGGACTATTC', 'GGGACTATGC', 'GGGACTATCA', 'GGGACTATCT', 'GGGACTATCG', 'GGGACTGACC', 'GGGACTGGCC', 'GGGACTGCCC', 'GGGACTGTAC', 'GGGACTGTTC', 'GGGACTGTGC', 'GGGACTGTCA', 'GGGACTGTCT', 'GGGACTGTCG', 'GGGACTCACC', 'GGGACTCGCC', 'GGGACTCCCC', 'GGGACTCTAC', 'GGGACTCTTC', 'GGGACTCTGC', 'GGGACTCTCA', 'GGGACTCTCT', 'GGGACTCTCG', 'GGGACTTAAC', 'GGGACTTATC', 'GGGACTTAGC', 'GGGACTTACA', 'GGGACTTACT', 'GGGACTTACG', 'GGGACTTGAC', 'GGGACTTGTC', 'GGGACTTGGC', 'GGGACTTGCA', 'GGGACTTGCT', 'GGGACTTGCG', 'GGGACTTCAC', 'GGGACTTCTC', 'GGGACTTCGC', 'GGGACTTCCA', 'GGGACTTCCT', 'GGGACTTCCG', 'GGGACTTTAA', 'GGGACTTTAT', 'GGGACTTTAG', 'GGGACTTTTA', 'GGGACTTTTT', 'GGGACTTTTG', 'GGGACTTTGA', 'GGGACTTTGT', 'GGGACTTTGG', 'GGGGCGTTCC', 'AGGGCGTTCC', 'TGGGCGTTCC', 'CGGGCGTTCC', 'GAGGCGTTCC', 'GTGGCGTTCC', 'GCGGCGTTCC', 'GGAGCGTTCC', 'GGTGCGTTCC', 'GGCGCGTTCC', 'GGGACGTTCC', 'GGGTCGTTCC', 'GGGCCGTTCC', 'GGGGAGTTCC', 'GGGGTGTTCC', 'GGGGGGTTCC', 'GGGGCATTCC', 'GGGGCTTTCC', 'GGGGCCTTCC', 'GGGGCGATCC', 'GGGGCGGTCC', 'GGGGCGCTCC', 'GGGGCGTACC', 'GGGGCGTGCC', 'GGGGCGTCCC', 'GGGGCGTTAC', 'GGGGCGTTTC', 'GGGGCGTTGC', 'GGGGCGTTCA', 'GGGGCGTTCT', 'GGGGCGTTCG']

input_files = glob.glob("Path/to/input/*.fasta")

for input_file in input_files:
    
    category_counts = {
        "RN2": 0,
        "RN3": 0,
        "RN4": 0,
        "R2N2": 0,
        "R2N3": 0,
        "R2N4": 0,
        "others": 0
    }

    
    with open(input_file, "r") as input_handle:
        for record in SeqIO.parse(input_handle, "fasta"):
            sequence = record.seq

            # Count occurrences of R_sites and N_sites in the sequence
    
            count_R_sites = sum(sequence.count(site) for site in R_sites)
            count_N_sites = sum(sequence.count(site) for site in N_sites)

            
            category = None
            if count_R_sites == 1 and count_N_sites == 2:
                category = "RN2"
            elif count_R_sites == 1 and count_N_sites == 3:
                category = "RN3"
            elif count_R_sites == 1 and count_N_sites == 4:
                category = "RN4"
            elif count_R_sites == 2 and count_N_sites == 2:
                category = "R2N2"
            elif count_R_sites == 2 and count_N_sites == 3:
                category = "R2N3"
            elif count_R_sites == 2 and count_N_sites == 4:
                category = "R2N4"
            else:
                category = "others"

            
            category_counts[category] += 1

    
    with open("Path/to/output/RN_Counts.txt", "a") as notepad:  
        notepad.write(f"Counts for file: {input_file}\n")
        for category, count in category_counts.items():
            notepad.write(f"{category}: {count}\n")
        notepad.write("\n")